name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger on PRs targeting the main branch

jobs:
  test:
    runs-on: ubuntu-latest  # Run on the latest Ubuntu environment

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Install dependencies listed in your requirements.txt

      - name: Run tests
        run: |
          pytest  # Running the unit tests with pytest, assuming you have tests set up

  model-test:
    runs-on: ubuntu-latest
    needs: test  # Ensure that the tests pass before running model tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run model evaluation
        run: |
          python evaluate_model.py  # Assuming you have a model evaluation script to test model performance


name: CI/CD Pipeline

# Trigger the workflow on push or pull request to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    # Steps to run for each job
    steps:
    # Step 1: Check out the code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Python (you can change the version depending on your needs)
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 4: Run tests (make sure to adjust the test command to your setup)
    - name: Run tests
      run: |
        pytest --maxfail=1 --disable-warnings -q

    # Step 5: Upload code coverage (optional)
    - name: Upload coverage to Codecov (optional)
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
